{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jef Danusantoso\\\\Desktop\\\\Codings\\\\React\\\\project2\\\\banking-app4\\\\src\\\\dashboard\\\\dashboard.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AccounComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\"\n    };\n  }\n\n  //The componentDidMount() lifecycle method is usually used for populating data after page load\n  //in other words... once this component is rendered, the body of the method will execute\n\n  componentDidMount() {\n    //hardcoding - but imagine we're making some HTTP call to a server that populates this use data. login?\n    //to set the fields of the state object, we use this.setState()\n\n    this.setState({\n      firstName: \"Benjamin\",\n      lastName: \"P\",\n      username: \"FlamePrincessLuvr111\",\n      email: \"bennyp@revature.com\"\n    });\n  }\n\n  //BIG PICTURE: when the component renders, the state will get populated with user data\n\n  //as usual, we need a render method that renders the view of the this Class Component\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"User: \", this.state.firstName, \" \", this.state.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Email: \", this.state.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PostComponent, {\n        ...this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n\n    //to send the entire state object to a child component, we use {...this.state}\n  }\n}","map":{"version":3,"names":["React","AccounComponent","Component","constructor","props","state","firstName","lastName","username","email","componentDidMount","setState","render"],"sources":["C:/Users/Jef Danusantoso/Desktop/Codings/React/project2/banking-app4/src/dashboard/dashboard.tsx"],"sourcesContent":["import React from \"react\"\r\n\r\nexport class AccounComponent extends React.Component<any, User> {\r\n\r\n    constructor(props:any){\r\n\r\n        super(props)\r\n\r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            username: \"\",\r\n            email: \"\"\r\n         }\r\n\r\n    }\r\n\r\n     //The componentDidMount() lifecycle method is usually used for populating data after page load\r\n    //in other words... once this component is rendered, the body of the method will execute\r\n\r\n    componentDidMount(): void {\r\n\r\n        //hardcoding - but imagine we're making some HTTP call to a server that populates this use data. login?\r\n        //to set the fields of the state object, we use this.setState()\r\n        \r\n        this.setState(\r\n            {\r\n\r\n                firstName: \"Benjamin\",\r\n                lastName: \"P\",\r\n                username: \"FlamePrincessLuvr111\",\r\n                email: \"bennyp@revature.com\"\r\n\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    //BIG PICTURE: when the component renders, the state will get populated with user data\r\n\r\n    //as usual, we need a render method that renders the view of the this Class Component\r\n\r\n    render() {\r\n        \r\n        return(\r\n\r\n            <div>\r\n                <h2>User: {this.state.firstName} {this.state.lastName}</h2>\r\n                <h3>Email: {this.state.email}</h3>\r\n                <PostComponent {...this.state}></PostComponent>\r\n            </div>\r\n\r\n        )\r\n\r\n         //to send the entire state object to a child component, we use {...this.state}\r\n\r\n    }\r\n\r\n\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,OAAO,MAAMC,eAAe,SAASD,KAAK,CAACE,SAAS,CAAY;EAE5DC,WAAW,CAACC,KAAS,EAAC;IAElB,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,KAAK,GAAG;MACTC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACV,CAAC;EAEN;;EAEC;EACD;;EAEAC,iBAAiB,GAAS;IAEtB;IACA;;IAEA,IAAI,CAACC,QAAQ,CACT;MAEIL,SAAS,EAAE,UAAU;MACrBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,sBAAsB;MAChCC,KAAK,EAAE;IAEX,CAAC,CACJ;EAEL;;EAEA;;EAEA;;EAEAG,MAAM,GAAG;IAEL,oBAEI;MAAA,wBACI;QAAA,WAAI,QAAM,EAAC,IAAI,CAACP,KAAK,CAACC,SAAS,EAAC,GAAC,EAAC,IAAI,CAACD,KAAK,CAACE,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eAC3D;QAAA,WAAI,SAAO,EAAC,IAAI,CAACF,KAAK,CAACI,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eAClC,QAAC,aAAa;QAAA,GAAK,IAAI,CAACJ;MAAK;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7C;;IAIT;EAEL;AAGJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}